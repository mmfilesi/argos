'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @namespace ApiRest
 * @param {object} [optionsOverride] Set default options
 * optionsOverride = {
    'type': 'application/json',
    'headers': [{'key': 'foo', 'value': 'bar'}],
    'charset': 'ASCII',
    'showPreload': true,
    'errorInterceptor': true
    }
  };
 *
 * @description Esta clase sirve para gestionar las llamadas rest.
 * Una vez sacada una instancia, podemos acceder a los métodos get, post, put y delete.
 * Un ejemplo con promesas:
 *
 *  ```javascript
    module.loadCountries = ()=> {
      let instanceRest  = new ApiRest();
      let deferred      = Q.defer();
      let uri           = globals.getRest().getCapital;

      instanceRest.getResource(uri).then(
        (data)=> {
          deferred.resolve(data);
        },
        (error)=> {
          msg.showErrorServer(error);
          deferred.reject(error);
        });
      return deferred.promise;
    };
    ```
  * En cada instancia podemos sobreescribir las opciones por defecto que se definen en .src/config.json, que de momento son:
  - _type_: el tipo mime (ie, application/json).
  - _headers_: un array de objetos key-value con las cabeceras que se añadirán de forma automática.
  Por ejemplo:
    ```
      [{
        "key": "GS-AUTH-TOKEN",
        "value": "123456"
      }]
    ```
  - _showPreload_: si se muestra o no un preloader de forma automática cada vez que se dispara un request (pendiente las css, por cierto)
  - _errorInterceptor_: si se gestionan o no de manera automática los errores indicados en el response (por status o código preestablecido)
  *
  * __todo__:
  - implementar las promesas en los métodos de la clase (?)
  - control de un token caducado.
  - añadir más verbos rest.
 */

var ApiRest = function () {
  function ApiRest(optionsOverride) {
    _classCallCheck(this, ApiRest);

    this.options = optionsOverride ? this._setOptions(optionsOverride) : restUtils.getOptionsDefault();
  }

  /**
  * @memberof ApiRest#
  * @method
  * @name _setOptions
  * @description Método privado para gestionar las opciones por defecto.
  */


  _createClass(ApiRest, [{
    key: '_setOptions',
    value: function _setOptions(optionsOverride) {
      var prop = void 0;
      var optionsDefault = restUtils.getOptionsDefault();

      for (prop in optionsOverride) {
        if (optionsDefault.hasOwnProperty(prop)) {
          optionsDefault[prop] = optionsOverride[prop];
        }
      }
      return optionsDefault;
    }

    /**
    * @memberof ApiRest#
    * @method
    * @name _setHeaders
    * @description Método privado para modificar los headers del request.
    */

  }, {
    key: '_setHeaders',
    value: function _setHeaders(req) {
      var i = 0;
      var len = void 0;

      if (this.options.hasOwnProperty('type')) {
        req.setRequestHeader('Content-Type', this.options.type + '; charset=' + this.options.charset);
      }
      if (this.options.hasOwnProperty('headers') && this.options.headers.length) {
        len = this.options.headers.length;
        for (; i < len; i++) {
          req.setRequestHeader(this.options.headers[i].key, this.options.headers[i].value);
        }
      }
      return req;
    }

    /**
    * @memberof ApiRest#
    * @method
    * @name  _doRequest
    * @description Método privado para realizar la petición ajax.
    */

  }, {
    key: '_doRequest',
    value: function _doRequest(resource, verb, aditionalData) {
      var _this = this;

      var deferred = Q.defer();
      var req = new XMLHttpRequest();
      var queryString = verb === 'GET' && (typeof aditionalData === 'undefined' ? 'undefined' : _typeof(aditionalData)) === 'object' ? restUtils.prepareQueryString(aditionalData) : '';
      var postData = verb !== 'GET' && aditionalData ? JSON.stringify(aditionalData) : '';
      var serverResponse = {};

      req.open(verb, resource + queryString, true);
      req = this._setHeaders(req);

      req.onreadystatechange = function (e) {
        if (req.readyState !== 4) {
          return;
        }
        serverResponse = restUtils.prepareResponse(e, req, _this.options);

        if (!serverResponse.isValid && _this.options.errorInterceptor) {
          restUtils.showErrorServer(serverResponse.errorDescription);
          deferred.reject(serverResponse.errorDescription);
        } else {
          if (_this.options.showPreload) {
            restUtils.hidePreloader();
          }
          deferred.resolve(serverResponse.content);
        }
      };

      if (this.options.showPreload) {
        restUtils.showPreloader();
      }

      req.send(postData);
      return deferred.promise;
    }

    /**
    * @memberof ApiRest#
    * @method
    * @name getResource
    * @param {string} resource. URL del recurso.
    * @param {array} [queryString]. Un array de objetos que se añaden como query string (también se puede indicar directamente en el resource)
    * @return {undefined}
    * @description Método público para realizar las peticiones GET.
    */

  }, {
    key: 'getResource',
    value: function getResource(resource, queryString) {
      return this._doRequest(resource, 'GET', queryString);
    }

    /**
    * @memberof ApiRest#
    * @method
    * @name postResource
    * @param {string} resource. URL del recurso.
    * @param {object} [postData]. Un json con los datos a enviar.
    * @return {undefined}
    * @description Método público para realizar las peticiones POST.
    */

  }, {
    key: 'postResource',
    value: function postResource(resource, postData) {
      return this._doRequest(resource, 'POST', postData);
    }

    /**
    * @memberof ApiRest#
    * @method
    * @name putResource
    * @param {string} resource. URL del recurso.
    * @param {object} [postData]. Un json con los datos a enviar.
    * @return {undefined}
    * @description Método público para realizar las peticiones PUT.
    */

  }, {
    key: 'putResource',
    value: function putResource(resource, putData) {
      return this._doRequest(resource, 'PUT', putData);
    }

    /**
    * @memberof ApiRest#
    * @method
    * @name deleteResource
    * @param {string} resource. URL del recurso.
    * @param {object} [postData]. Un json con los datos a enviar.
    * @return {undefined}
    * @description Método público para realizar las peticiones DELETE.
    */

  }, {
    key: 'deleteResource',
    value: function deleteResource(resource, deleteData) {
      return this._doRequest(resource, 'DELETE', deleteData);
    }
  }]);

  return ApiRest;
}();;/**
 * @namespace config
 * @description Módulo para gestionar los datos de configuración iniciales de la aplicación, los cuales se definen en ./src/theme/config.json
 */

'use strict';

var config = function () {

  var module = {};
  var self = module;

  /**
  * @memberof config#
  * @name _configGeneral
  * @description Objeto privado con la configuración general.
  * @property {string} environment El entorno de trabajo: develop, production, test, etcétera.
  * @property {string} lang El idioma por defecto (para seleccionar los textos definidos en .src/shell/theme/langs)
  */
  module._configGeneral = {
    'environment': 'develop',
    'lang': 'en_En'
  };

  /**
  * @memberof config#
  * @name _optionsState
  * @description Objeto privado para configurar las opciones de la navegación por estados
  * @property {boolean} forceEntry Si debe cargarse un estado por defecto al entrar en la web.
  * @property {string} defaultState El estado que debe cargarse por defecto.
  */
  module._optionsState = {
    'forceEntry': false,
    'defaultState': 'main'
  };

  /**
  * @memberof config#
  * @name _serviceWorkers
  * @description Objeto privado para gestionar los service workers
  * @property {boolean} active Si cargan o no.
  */
  module._serviceWorkers = {
    'active': false
  };

  /**
  * @memberof config#
  * @method
  * @name init
  * @description Método público para cargar la configuración definida en el config.json del theme.
  * @return {object} Devuelve una promesa.
  */
  module.init = function () {
    var deferred = Q.defer();
    var urlConfig = './shell/theme/config.json';
    var restOptions = {
      'type': 'application/json',
      'showPreload': false,
      'errorInterceptor': true
    };
    var instanceRest = new ApiRest(restOptions);

    instanceRest.getResource(urlConfig).then(function (data) {
      self._initAll(data);
      deferred.resolve();
    }, function (error) {
      log.error('error get config data: ' + error);
      deferred.reject();
    });
    return deferred.promise;
  };

  /**
  * @memberof config#
  * @method
  * @name _initAll
  * @description Método privado para distribuir los seteos de config.json.
  */
  module._initAll = function (data) {
    self._configGeneral.environment = data.generalData.environment;
    self._configGeneral.lang = data.generalData.lang;
    self._serviceWorkers.active = data.serviceWorkers.active;

    if (data.rest.hasOwnProperty('restOptions')) {
      restUtils.setOptionsDefault(data.rest.restOptions);
    }
    if (data.rest.hasOwnProperty('specialCodes')) {
      restUtils.setSpecialCodes(data.rest.specialCodes);
    }
    if (data.hasOwnProperty('optionsState') && data.optionsState.hasOwnProperty('forceEntry')) {
      self._optionsState.forceEntry = data.optionsState.forceEntry;
      self._optionsState.defaultState = data.optionsState.defaultState;
    }
  };

  /**
  * @memberof config#
  * @method
  * @name getOptionsState
  * @description Método público para recuperar las opciones de la navegación por estados.
  * @return {object}
  */
  module.getOptionsState = function () {
    return self._optionsState;
  };

  /**
  * @memberof config#
  * @method
  * @name getServiceWorkers
  * @description Método público para recuperar las opciones relacionadas con los service workers.
  * @return {object}
  */
  module.getServiceWorkers = function () {
    return self._serviceWorkers;
  };

  /**
  * @memberof config#
  * @method
  * @name getEnvironment
  * @description Método público que devuelve el environment.
  * @return {string}
  */
  module.getEnvironment = function () {
    return self._configGeneral.environment;
  };

  /**
  * @memberof config#
  * @method
  * @name getLang
  * @description Método público que devuelve el idioma definido en config.json.
  * @return {string}
  */
  module.getLang = function () {
    return self._configGeneral.lang;
  };

  return {
    init: module.init,
    getOptionsState: module.getOptionsState,
    getEnvironment: module.getEnvironment,
    getLang: module.getLang,
    getServiceWorkers: module.getServiceWorkers
  };
}();;'use strict';

/**
 * @namespace Ar
 * @description Lite module for DOM manipulating
 * methods (work in progress)
 *
  *  **text()** inserta una cadena de texto en los elementos seleccionados
  *  ```javascript
    Ar('.foo').text('bazinga');
    ```

  *  **html()** inserta una cadena de html en los elementos seleccionados. Su uso es obligatorio cuando se inserta html derivado del mundo exterior de la aplicación, ya que previene la inserción de scripts.
  *  ```javascript
    Ar('.foo').html('bazinga');
    ```

  *  **hide()** oculta uno o más elementos
  * ```javascript
    Ar('.foo').hide();
    ```

  * **show()** muestra uno o más elementos
  *  ```javascript
    Ar('.foo').hide();
    ```

  *  **toggle()** togglea la visibilidad de uno o más elementos
  * ```javascript
    Ar('.foo').hide();
    ```

  *  **addClass()** añade una clase
  * ```javascript
    Ar('.foo').addClass('clase');
    ```

  *  **removeClass()** elimina una clase
  * ```javascript
    Ar('.foo').removeClass('clase');
    ```

  *  **toggleClass()** togglea una clase
  * ```javascript
    Ar('.foo').toggleClass('clase');
    ```

  *  **setStyle()** cambia un estilo (en línea)
  * ```javascript
    Ar('.foo').setStyle('color', 'red');
    ```

  *  **remove()** elimina un nodo (y sus listeners asociados)
  * ```javascript
    Ar('.foo').remove();
    ```

  *  **onRender()** chequea que un nodo esté renderizado
  * ```javascript
    Ar().onRender('#foo');
    ```
*/

(function () {

  var argosDom = function argosDom(params) {
    var selector = document.querySelectorAll(params);
    var i = 0;
    this.length = selector.length;

    for (; i < this.length; i++) {
      this[i] = selector[i];
    }
    return this;
  };

  var Ar = function Ar(params) {
    return new argosDom(params);
  };

  var methods = {};

  methods.self = this;

  methods.hide = function () {
    var len = this.length;

    while (len--) {
      this[len].classList.add('argos-hide');
    }
    return this;
  };

  methods.show = function () {
    var len = this.length;

    while (len--) {
      this[len].classList.remove('argos-hide');
    }
    return this;
  };

  methods.toggle = function () {
    var len = this.length;

    while (len--) {
      this[len].classList.toggle('argos-hide');
    }
    return this;
  };

  methods.addClass = function (classAdd) {
    var len = this.length;

    if (classAdd) {
      while (len--) {
        this[len].classList.add(classAdd);
      }
    }
    return this;
  };

  methods.removeClass = function (classRemove) {
    var len = this.length;

    if (classRemove) {
      while (len--) {
        this[len].classList.remove(classRemove);
      }
    }
    return this;
  };

  methods.toggleClass = function (classToggle) {
    var len = this.length;

    if (classToggle) {
      while (len--) {
        this[len].classList.toggle(classToggle);
      }
    }
    return this;
  };

  methods.setStyle = function (style, value) {
    var len = this.length;

    if (style && value) {
      while (len--) {
        this[len].style[style] = value;
      }
    }
    return this;
  };

  methods.fade = function () {
    var len = this.length;

    while (len--) {
      this[len].classList.add('fade');
      this[len].classList.add('fade-in');
      this[len].classList.add('fade-out');
    }

    return this;
  };

  methods.text = function (text) {
    var len = this.length;

    while (len--) {
      this[len].textContent = text;
    }

    return this;
  };

  methods.html = function (content) {
    var len = this.length;

    if (content.indexOf('script') !== -1) {
      content = 'scripts are not allowed';
    }

    while (len--) {
      this[len].innerHTML = content;
    }

    return this;
  };

  methods.remove = function () {
    var len = this.length;

    while (len--) {
      if (this[len].parentNode) {
        this[len].parentNode.removeChild(this[len]);
      }
    }
    return true;
  };

  methods.onRender = function (node) {
    var deferred = Q.defer();
    var timer = {

      interval: function interval() {
        var self = this;
        var timeCount = setTimeout(function () {
          clearTimeout(timeCount);
          self.init(node);
        }, 100);
      },

      init: function init(node) {
        var nodeToCheck = document.querySelectorAll(node);

        if (!nodeToCheck || nodeToCheck.length === 0) {
          this.interval(node);
          return;
        }
        deferred.resolve();
      }

    };

    timer.init(node);
    return deferred.promise;
  };

  methods.isEmpty = function (obj) {
    var object = obj;

    for (var prop in object) {
      if (object.hasOwnProperty(prop)) {
        return false;
      }
    }

    return true;
  };

  methods.openModal = function (idModal) {
    var modal = document.getElementById(idModal);

    modal.setAttribute('show', 'show');
  };

  methods.closeModal = function () {
    this[0].setAttribute('show', 'hidden');
  };

  Ar.fn = argosDom.prototype = methods;

  if (!window.Ar) {
    window.Ar = Ar;
  }
})();;/**
 * @namespace forms
 * @description module for work with forms.
 * todo: show error server
 */

'use strict';

var forms = function () {

  var module = {};
  var self = module;

  /* ====================================================
      get values
  ==================================================== */

  /**
  * @memberof forms#
  * @method
  * @name getValues
  * @param {string} idForm - The id of the form.
  * @return {object} All form childrens values.
  * @description return pair key-value for each input.
  * The inputs need have the class 'js-itemForm' and, recommended, an atribute called 'data-key'.
  * @example:
  *  ```html
    <input type="text" name="inputText" class="js-itemForm" data-key="inputText">
    ```
  */
  module.getValues = function (idForm) {
    var nodes = document.querySelectorAll('#' + idForm + ' .js-itemForm');
    var jsonForm = {};
    var i = 0;
    var len = nodes.length;
    var key = '';
    var value = '';
    /* guardamos aquí los radioButtons para no setearlos más de una vez */
    var radioInputs = [];

    if (!len) {
      log.warning('the form dont have inputs or mybe forget add js-itemForm class?');
    }

    for (; i < len; i++) {
      if (nodes[i].type.toLowerCase() !== 'radio' || radioInputs.indexOf(nodes[i].name) === -1) {
        key = nodes[i].getAttribute('data-key') || nodes[i].name || i;
        value = self.getValue(nodes[i]);
        jsonForm[key] = value;
        if (nodes[i].type.toLowerCase() === 'radio') {
          radioInputs.push(nodes[i].name);
        }
      }
    }

    return jsonForm;
  };

  /**
  * @memberof forms#
  * @method
  * @name getValue
  * @param {string | object} _node_ - The id element or the element of form.
  * @return {string |array} The form element value.
  */
  module.getValue = function (_node_) {
    var node = typeof _node_ === 'string' ? document.getElementById(idNode) : _node_;
    var value = '';
    var type = '';

    if (!node) {
      log.warning('getValue() :: there is no element');
    }

    type = node.tagName.toLowerCase() !== 'input' ? node.tagName.toLowerCase() : node.type.toLowerCase();
    type = type === 'select' && node.type === 'select-multiple' ? 'select-multiple' : type;

    switch (type) {
      case 'text':
      case 'textarea':
      case 'number':
        value = node.value.trim();
        break;
      case 'checkbox':
        value = node.checked ? node.value : false;
        break;
      case 'radio':
        value = document.querySelector('input[name = "' + node.name + '"]:checked').value;
        break;
      case 'select-multiple':
        value = self._getMultiSelectValues(node);
        break;
      default:
        value = node.value;
    }

    return value;
  };

  /**
  * @memberof forms#
  * @method
  * @name _getMultiSelectValues
  * @param {object} _node_ - The element multi-select of form.
  * @return {array} The multi-select value.
  */
  module._getMultiSelectValues = function (node) {
    var selectedValues = [];
    var i = 0;
    var len = node.length;

    for (; i < len; i++) {
      if (node.options[i].selected) {
        selectedValues.push(node.options[i].value);
      }
    }
    return selectedValues;
  };

  /* ====================================================
      utils
  ==================================================== */

  module.enabled = function (idNode) {
    self._setEnabled(idNode, false);
  };

  module.disabled = function (idNode) {
    self._setEnabled(idNode, true);
  };

  module._setEnabled = function (idNode, enab) {
    document.getElementById(idNode).setAttribute('disabled', enab);
  };

  module.required = function (idNode) {
    self._setRequired(idNode, 'required');
  };

  module.notRequired = function (idNode) {
    self._setRequired(idNode, false);
  };

  module._setRequired = function (idNode, req) {
    document.getElementById(idNode).setAttribute('data-required', req);
  };

  /* ====================================================
      validity checks
  ==================================================== */

  module.isValid = function (idForm) {
    var nodes = document.querySelectorAll('#' + idForm + ' .js-itemForm');
    var i = 0;
    var len = nodes.length;
    var isValid = true;

    if (!len) {
      log.warning('the form dont have inputs or mybe forget add js-itemForm class?');
    }

    self.resetErrors(idForm);

    for (; i < len; i++) {
      if (!self.checkRequired(nodes[i]) || !self.checkType(nodes[i]) || !self.customValidation(nodes[i])) {
        isValid = false;
      }
    }
    return isValid;
  };

  /* No le paso los nodos para que se pueda usar como método de forma independiente */
  module.resetErrors = function (idForm) {
    var nodes = document.querySelectorAll('#' + idForm + ' .js-itemForm');
    var i = 0;
    var len = nodes.length;

    for (; i < len; i++) {
      nodes[i].classList.remove('hasError');
    }

    nodes = document.querySelectorAll('#' + idForm + ' .js-argosErrorMsg');
    i = 0;
    len = nodes.length;

    for (; i < len; i++) {
      nodes[i].parentNode.removeChild(nodes[i]);
    }
  };

  module.checkRequired = function (node) {
    var isValid = true;

    if (node.getAttribute('data-required') === 'required' && !self.getValue(node)) {
      isValid = false;
      self.addError(node, 'required');
    }
    return isValid;
  };

  module.checkType = function (node) {
    var type = node.getAttribute('data-type');

    switch (type) {
      case 'isNumber':
        return self._checkIsNumber(node);
      case 'isString':
        return self._checkIsString(node);
      case 'isEmail':
        return self._checkIsEmail(node);
      default:
        return true;
    }
  };

  module._checkIsString = function (node) {
    var isValid = true;
    var rule = /[1-9]/i;
    var value = self.getValue(node);

    if (!rule.test(value)) {
      isValid = false;
      self.addError(node, 'notString');
    }
    return isValid;
  };

  module._checkIsNumber = function (node) {
    var isValid = true;
    var rule = /^[0-9]*$/g;
    var value = self.getValue(node);

    if (!rule.test(value)) {
      isValid = false;
      self.addError(node, 'notNumber');
    }

    if (node.getAttribute('data-zero') && node.getAttribute('data-zero') === 'notAllowed' && value === 0) {
      self.addError(node, 'notZero');
      isValid = false;
    }

    if (node.getAttribute('data-negative') && node.getAttribute('data-negative') === 'notAllowed' && value < 0) {
      self.addError(node, 'notNegative');
      isValid = false;
    }

    return isValid;
  };

  module._checkIsEmail = function (node) {
    var isValid = true;
    var rule = /[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}/;
    var value = self.getValue(node);

    if (!rule.test(value)) {
      isValid = false;
      self.addError(node, 'notEmail');
    }

    return isValid;
  };

  module.customValidation = function (node) {
    var isValid = true;
    var rule = node.getAttribute('data-regex') ? new RegExp(node.getAttribute('data-regex'), 'i') : false;
    var value = self.getValue(node);

    if (!rule) {
      return isValid;
    }

    if (!rule.test(value)) {
      isValid = false;
      self.addError(node, node.getAttribute('data-regexErrMsg') || 'wrongFormat');
    }

    return isValid;
  };

  /* todo: ampliar tipología de errores */
  module.addError = function (node, errorType) {
    var errorString = '';

    switch (errorType) {
      case 'required':
        errorString = globals.getTexts().formValidations.isRequired;
        break;
      default:
        errorString = globals.getTexts().formValidations.wrongFormat;
    }
    node.insertAdjacentHTML('afterend', self.addErrorMsg(errorString));
    node.classList.add('hasError');
  };

  module.addErrorMsg = function (msg) {
    var stringHTML = '<div class="form__error js-argosErrorMsg"><div class="form__error__arrow"></div>' + msg + '</div></div>';

    return stringHTML;
  };

  return {
    getValues: module.getValues,
    getValue: module.getValue,
    disabled: module.disabled,
    enabled: module.enabled,
    required: module.required,
    notRequired: module.notRequired,
    isValid: module.isValid,
    checkRequired: module.checkRequired,
    checkType: module.checkType,
    customValidation: module.customValidation,
    addError: module.addError,
    addErrorMsg: module.addErrorMsg
  };
}();;'use strict';

/**
 * @namespace globals
 * @description get and set application global data
 */

var globals = function () {

  var module = {};
  var self = module;

  module.allStates = [];
  module.allTexts = {};
  module.allEndPoints = {};

  module.currentState = {
    'state': 'main',
    'section': ''
  };

  module.getAllStates = function () {
    return self.allStates;
  };

  module.loadAllStates = function () {
    var instanceRest = new ApiRest();
    var deferred = Q.defer();
    var uri = './shell/theme/states.json';

    instanceRest.getResource(uri).then(function (data) {
      self.allStates = data.states;
      deferred.resolve(data);
    }, function (error) {
      log.error('error get states: ' + error);
      deferred.reject();
    });
    return deferred.promise;
  };

  module.setCurrentState = function (_state_, _section_) {
    if (!_state_) {
      log.warning('dont set state if stage is not defined');
      return;
    }
    self.currentState.state = _state_;
    self.currentState.section = _section_ ? _section_ : '';
  };

  module.getCurrentState = function () {
    return self.currentState;
  };

  module.getTexts = function () {
    return self.allTexts;
  };

  module.loadTexts = function () {
    var instanceRest = new ApiRest();
    var deferred = Q.defer();
    var lang = config.getLang();
    var uri = './shell/theme/langs/' + lang + '.json';

    instanceRest.getResource(uri).then(function (data) {
      self.allTexts = data;
      deferred.resolve(data);
    }, function (error) {
      log.error('error loadTexts: ' + error);
      deferred.reject();
    });
    return deferred.promise;
  };

  module.loadRest = function () {
    var instanceRest = new ApiRest();
    var deferred = Q.defer();
    var lang = config.getLang();
    var uri = './shell/theme/rest.json';

    instanceRest.getResource(uri).then(function (data) {
      self.prepareRest(data);
      deferred.resolve();
    }, function (error) {
      log.error('error load config rest: ' + error);
      deferred.reject();
    });
    return deferred.promise;
  };

  module.prepareRest = function (data) {
    var environment = config.getEnvironment();
    var prefix = data.generalData.baseUrl[environment];
    var suffix = data.generalData.type[environment];

    for (var prop in data.endPoints) {
      self.allEndPoints[prop] = prefix + data.endPoints[prop] + suffix;
    }
  };

  module.getRest = function () {
    return self.allEndPoints;
  };

  return {
    getAllStates: module.getAllStates,
    loadAllStates: module.loadAllStates,
    getCurrentState: module.getCurrentState,
    setCurrentState: module.setCurrentState,
    getTexts: module.getTexts,
    loadTexts: module.loadTexts,
    loadRest: module.loadRest,
    getRest: module.getRest
  };
}();;/**
 * @namespace jsonUtils
 * @description utils to work with collections (arrays and objects)
 */

'use strict';

var jsonUtils = function () {

  var module = {};
  var self = module;

  module.copyObject = function (obToCopy) {
    return JSON.parse(JSON.stringify(obToCopy));
  };

  module.findInArray = function (_array_, valueToFind) {
    var i = 0;
    var len = _array.length;

    for (; i < len; i++) {
      if (valueToFind === _array_[i]) {
        return _array_[i];
      }
    }
    return false;
  };

  module.findInObject = function (_array_, key, value) {
    var i = 0;
    var len = _array_.length;

    for (; i < len; i++) {
      for (var prop in _array_[i]) {
        if (prop === key && _array_[i][prop] === value) {
          return _array_[i];
        }
      }
    }
    return false;
  };

  return {
    copyObject: module.copyObject,
    findInArray: module.findInArray,
    findInObject: module.findInObject
  };
}();;'use strict';

/**
 * @namespace logErrors
 * @description get and set application global data
 * todo: send errors to server
 */

var logErrors = function () {

  var module = {};
  var self = module;

  module.init = function () {
    self.addListeners();
  };

  module.addListeners = function () {
    window.onerror = function (message, source, lineno, colno, error) {
      var msg = 'error: ' + message + '\n        file: ' + source + '\n        line: ' + lineno + '\n        col: ' + colno + '\n        error: ' + error;
      log.error(msg);
    };
  };

  return {
    init: module.init
  };
}();;/**
 * @namespace log
 * @description Módulo con el que usar logs de consola de forma segura, ya que no se muestran en un entorno de producción.
 * Utilizar siempre estos métodos en lugar de console.algo().
 * @example
 * log.error('Error recuperando foo');
 */

'use strict';

var log = function () {

  var module = {};
  var self = module;

  var environment = config.getEnvironment();

  /**
  * @memberof log#
  * @method
  * @name success
  * @description log ok.
  */
  module.success = function (msg) {
    if (msg && environment !== 'production') {
      console.log('%c' + msg, 'color: #45a163');
    }
  };

  /**
  * @memberof log#
  * @method
  * @name log
  * @description log normal.
  */
  module.log = function (msg) {
    if (msg && environment !== 'production') {
      console.log('%c' + msg, 'color: #005999');
    }
  };

  /**
  * @memberof log#
  * @method
  * @name log
  * @description log warnings.
  */
  module.warning = function (msg) {
    if (msg && environment !== 'production') {
      console.log('%c' + msg, 'color: #f48024');
    }
  };

  /**
  * @memberof log#
  * @method
  * @name error
  * @description log ko.
  */
  module.error = function (msg) {
    if (msg && environment !== 'production') {
      console.log('%c' + msg, 'color: #f42424');
    }
  };

  /**
  * @memberof log#
  * @method
  * @name table
  * @description log de colecciones.
  */
  module.table = function (msg) {
    if (msg && environment !== 'production') {
      console.table(msg);
    }
  };

  return {
    success: module.success,
    log: module.log,
    warning: module.warning,
    error: module.error,
    table: module.table
  };
}();;'use strict';

/**
 * @namespace msg
 * @description Gestiona los mensajes que se le muestran al usuario
 */

var msg = function () {

  var module = {};
  var self = module;

  module._lastClass = '';

  module.showError = function (header, body) {
    self._showMsg('alert', header, body);
  };

  module.showWarning = function (header, body) {
    self._showMsg('warning', header, body);
  };

  module.showSuccess = function (header, body) {
    self._showMsg('success', header, body);
  };

  module.showErrorServer = function (error) {
    self._showMsg.showMsg('alert', 'server error', error);
    // todo : bloquear la aplicación
  };

  module.showMsg = function (type, header, body) {
    var msgElement = document.getElementById('argos-msg');
    var msgHeader = header || '';
    var msgBody = body || '';

    if (self._lastClass) {
      msgElement.classList.remove(self._lastClass);
    }
    self._lastClass = type;
    msgElement.classList.add(type);

    document.getElementById('argos-msg-header').textContent = msgHeader;
    document.getElementById('argos-msg-body').textContent = msgBody;

    msgElement.classList.add('argos-fade-out');
    msgElement.classList.remove('argos-hide');
    msgElement.classList.add('argos-fade-in');
  };

  return {
    showError: module.showError,
    showWarning: module.showWarning,
    showSuccess: module.showSuccess,
    showErrorServer: module.showErrorServer
  };
}();;'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var restUtils = function () {
  var _this = this;

  var module = {};
  var self = module;

  module.optionsDefault = {
    'type': 'application/json',
    'headers': [],
    'charset': 'utf-8',
    'showPreload': true,
    'errorInterceptor': true
  };

  module.codes = {
    'success': 'san-200',
    'notFound': 'san-404',
    'notAuth': 'san-403',
    'serverError': 'san-500',
    'tokenExpiration': '401',
    'tokenSanExpiration': 'san-441',
    'tokenCorporateExpiration': 'san-442'
  };

  module.prepareResponse = function (e, req, options) {
    var validation = {};
    var response = options.type === 'application/json' ? self.parseResponse(e) : req.responseText;
    var blockingErrors400 = ['403', '405', '406', '413', '414', '415', '416', '417', '429'];
    var blockingErrors500 = /^5/;

    validation.isValid = true, validation.content = response;
    validation.errorDescription = '';

    if (blockingErrors500.test(req.status) || blockingErrors400.indexOf(req.status) !== -1) {
      validation.isValid = false;
      validation.errorDescription = req.status.statusText ? req.status.statusText : 'error server';
      return validation;
    }

    if (!options) {
      return validation;
    }

    if (options.type === 'application/json' && !response) {
      validation.isValid = false;
      validation.errorDescription = 'error server: bad format json';
      return validation;
    }

    if (response.hasOwnProperty('result') && response.result.code === self.codes.serverError) {
      validation.isValid = false;
      validation.errorDescription = response.result.message ? response.result.message : 'error server';
      return validation;
    }

    return validation;
  };

  module.parseResponse = function (e) {
    var data = {};

    try {
      data = JSON.parse(e.target.responseText);
    } catch (error) {
      data = null;
      log.error('error parsing data', e);
    }
    return data;
  };

  module.validCode = function (result) {
    if (result.code === _this.codes.success) {
      return true;
    }
    return false;
  };

  module.checkTokenExpired = function (result) {
    if (result.code === _this.codes.tokenSanExpiration) {
      return true;
    }
    return false;
  };

  // todo, revisar
  module.resetToken = function () {
    //     let deferred = Q.defer();
    //
    //     function reset(corporateToken) {
    //       restToken.getAuthToken(corporateToken).then(function(data) {
    //         restOptions.headers[0].value = data.authToken;
    //         deferred.resolve();
    //       });
    //     }
    //
    //     if ( !config.tokenUrl ) {
    //       restToken.getCorporateToken().then(function(corporateToken) {
    //         reset(corporateToken);
    //       });
    //     } else {
    //       reset(corporateToken);
    //     }
    //     return deferred.promise;
  };

  module.getOptionsDefault = function () {
    return JSON.parse(JSON.stringify(self.optionsDefault));
  };

  module.setOptionsDefault = function (newOptions) {
    var key = void 0;

    if ((typeof newOptions === 'undefined' ? 'undefined' : _typeof(newOptions)) !== 'object') {
      log.error('new options must be an object');
      return false;
    }
    for (key in newOptions) {
      self.optionsDefault.key = newOptions[key];
    }
    return true;
  };

  module.prepareQueryString = function (queryString) {
    var query = queryString || {};
    var output = '?';
    var prop = void 0;

    for (prop in query) {
      if ({}.hasOwnProperty.call(query, prop)) {
        output += prop + '=' + query[prop] + '&';
      }
    }
    output = output.length ? output.slice(0, -1) : output;

    return output;
  };

  module.getSpecialCodes = function () {
    return self.codes;
  };

  module.setSpecialCodes = function (specialCodes) {
    self.codes = specialCodes;
  };

  /* todo: preparar una alternativa no polymer */
  module.showPreloader = function () {
    var node = document.getElementById('js-mainPreload');

    if (node) {
      node.setAttribute('show', 'show');
    }
  };

  /* todo: preparar una alternativa no polymer */
  module.hidePreloader = function () {
    var node = document.getElementById('js-mainPreload');

    if (node) {
      node.setAttribute('show', 'hidden');
    }
  };

  module.showErrorServer = function (errorMsg) {
    msg.showErrorServer(errorMsg);
  };

  return {
    getOptionsDefault: module.getOptionsDefault,
    setOptionsDefault: module.setOptionsDefault,
    getSpecialCodes: module.getSpecialCodes,
    setSpecialCodes: module.setSpecialCodes,
    prepareQueryString: module.prepareQueryString,
    prepareResponse: module.prepareResponse,
    showPreloader: module.showPreloader,
    hidePreloader: module.hidePreloader,
    showErrorServer: module.showErrorServer
  };
}();;'use strict';

/**
 * @namespace router
 * @description proxy routes
 */

var router = function () {
  var _arguments = arguments;


  var module = {};
  var self = module;

  module.stateSelected = {};

  /**
  * @memberof router#
  * @method
  * @name init
  * @return {undefined}
  * @description init states listeners
  */
  module.init = function () {
    if (!self.checkIsSupported()) {
      msg.showError('browser deprecated', 'No support api navigation');
      return;
    }
    self.addListeners();
  };

  /**
  * @memberof router#
  * @method
  * @name checkIsSupported
  * @return {boolean}
  * @description check if browser can manage history and pushState,
  * necessary for the system router.
  */
  module.checkIsSupported = function () {
    if ('history' in window && 'pushState' in history) {
      return true;
    }
    return false;
  };

  /**
  * @memberof router#
  * @method
  * @name addListeners
  * @return {undefined}
  * @description add listener to hash (#) change
  */
  module.addListeners = function () {
    window.addEventListener('hashchange', function () {
      self.setRoute();
    });
  };

  /**
  * @memberof router#
  * @method
  * @name setRoute
  * @return {undefined}
  * @description set the url, call lazy load controllers, and call the method defined in routes.json
  */

  //// OJO, FALTA CUANDO VIENE X ENLACE

  module.setRoute = function () {
    var argumentsFn = self.stateSelected.params ? self.stateSelected.params.split(',') : null;
    var stateSelected = void 0;

    /* Si no venimos de stateGo, hay que recuperar los datos */
    if (!self.stateSelected.stateGo) {
      stateSelected = self.findRouteByUrl();
      /* Si no hay ningún estado, dejamos pasar para que se puedan usar los hastagh en la página */
      if (!stateSelected) {
        return;
      } else {
        self.stateSelected.state = stateSelected.state;
        self.stateSelected.section = stateSelected.section;
        self.stateSelected.entry = stateSelected.entry;
        self.stateSelected.url = stateSelected.url;
      }
    }

    globals.setCurrentState(self.stateSelected.state, self.stateSelected.section);

    views.loadView(self.stateSelected.state).then(function () {
      /* Si al final uso un namespace, pasar este en lugar de window */
      self.executeFunction(self.stateSelected.entry, window, argumentsFn);
      history.replaceState(self.stateSelected, self.stateSelected.state, '#' + self.stateSelected.url);
      self.resetStateSelected();
    });
  };

  module.stateGo = function (state, params) {
    var currentHash = window.location.hash;

    self.stateSelected = JSON.parse(JSON.stringify(self.findRouteByState(state)));

    /* Cacheamos aquí los parámetros para pasarlos más adelante */
    self.stateSelected.params = params;

    /* Marcamos que venimos de state go para no duplicar el trabajo más adelante
    y saber que ya tenemos el state seleccionado */
    self.stateSelected.stateGo = true;

    /* Para poder llamar a la misma página debemos chequear si estamos llamando
    al mismo estado */
    if (currentHash && currentHash.replace('#', '') === self.stateSelected.url) {
      self.setRoute();
    } else {
      window.location.hash = self.stateSelected.url;
    }
  };

  module.resetStateSelected = function () {
    self.stateSelected = {
      'state': '',
      'url': '',
      'entry': '',
      'controllers': [],
      'templates': [],
      'params': '',
      'stateGo': false
    };
  };

  module.getQueryString = function () {
    var query = window.location.search.substring(1);
    var params = {};
    var temp = [];
    var itemTemp = [];
    var i = 0;
    var len = void 0;

    if (query === '') {
      return false;
    }
    if (query.indexOf('&') !== -1) {
      temp = query.split('&');
    } else {
      temp.push(query);
    }
    len = temp.length;
    for (; i < len; i++) {
      itemTemp = temp[i].split('=');
      params[itemTemp[0]] = itemTemp[1];
    }
    return params;
  };

  module.cleanQueryString = function () {
    var url = window.location.href;

    url = url.split('?').shift();
    window.history.pushState({}, '', url);
  };

  module.executeFunction = function (functionName, _context_) {
    var context = _context_ || window;
    var args = Array.prototype.slice.call(_arguments, 2);
    var namespaces = functionName.split('.');
    var func = namespaces.pop();
    var i = 0;
    var len = namespaces.length;

    for (; i < len; i++) {
      context = context[namespaces[i]];
    }
    return context[func].apply(context, args);
  };

  module.findRouteByUrl = function () {
    var states = globals.getAllStates();
    var len = states.length;
    var i = 0;
    var stateSelected = false;
    var hash = location.hash.replace('#', '');

    for (; i < len; i++) {
      if (states[i].url === hash) {
        stateSelected = states[i];
        break;
      }
    }

    return stateSelected;
  };

  module.findRouteByState = function (state) {
    var states = globals.getAllStates();
    var len = states.length;
    var i = 0;
    var stateSelected = false;

    for (; i < len; i++) {
      if (states[i].state === state) {
        stateSelected = states[i];
        break;
      }
    }

    return stateSelected;
  };

  module.stateIsDefined = function (state) {
    if (self.findRouteByState()) {
      return true;
    }
    return false;
  };

  return {
    init: module.init,
    stateGo: module.stateGo,
    getQueryString: module.getQueryString,
    cleanQueryString: module.cleanQueryString,
    findRouteByState: module.findRouteByState,
    stateIsDefined: module.stateIsDefined
  };
}();;/**
 * @namespace utils
 * @description La idea es que este módulo vaya creciendo con utilidades generales.
 */

'use strict';

var utils = function () {

  var module = {};
  var self = module;

  /**
  * @memberof utils#
  * @method
  * @name viewPort
  * @description Devuelve el navegador del cliente: isAndroid, isiOS, isFirefox,isMobile
  * @return {object}
  */
  module.viewPort = function () {
    var isAndroid = navigator.userAgent.match(/Android/i) !== null;
    var isiOS = navigator.userAgent.match(/(iPad)|(iPhone)|(iPod)/i) !== null;
    var isFirefox = navigator.userAgent.match(/Firefox/i) !== null;
    var isMobile = isiOS || isAndroid;

    var getNavigator = {
      'isAndroid': isAndroid,
      'isiOS': isiOS,
      'isMobile': isMobile,
      'isFirefox': isFirefox
    };
    return getNavigator;
  };

  return {
    viewPort: module.viewPort
  };
}();;'use strict';

/**
 * @namespace viewstUtils
 * @description utilities views (screens)
 */

var viewsUtils = function () {

  var module = {};
  var self = module;

  module.renderTemplate = function (_data_, _source_, _container_) {
    var source = document.getElementById(_source_).innerHTML;
    var template = Handlebars.compile(source);
    var compiledTemplate = template(_data_);
    var container = _container_ || 'argos-main-stage';

    document.getElementById(container).innerHTML = compiledTemplate;
  };

  return {
    renderTemplate: module.renderTemplate
  };
}();;'use strict';

/**
 * @namespace views
 * @description manage templates and controllers lazy load. argos-views-utils.js
 */

var views = function () {

  var module = {};
  var self = module;

  module.ctrlsLoaded = [];
  module.tplsLoaded = [];
  module.stateSelected = {};

  module.loadView = function (state) {
    var deferred = Q.defer();
    var len = 0;
    var stateSelected = {};
    var scriptsContainer = document.getElementById('argos-scripts-container');
    var tplsContainer = document.getElementById('argos-templates-container');
    var allPromisses = [];
    var currentCtrl = '';

    self.ctrlsLoaded = [];
    self.tplsLoaded = [];
    self.stateSelected = {};

    if (!scriptsContainer || !tplsContainer) {
      log.error('nodes for lazy load are mandatory');
    }

    /* todo: llevar a un método empty() de argosDom */
    while (scriptsContainer.firstChild) {
      currentCtrl = scriptsContainer.firstChild.getAttribute('data-ctrl');
      if (window.hasOwnProperty(currentCtrl)) {
        delete window[currentCtrl];
      }
      scriptsContainer.removeChild(scriptsContainer.firstChild);
    }
    while (tplsContainer.firstChild) {
      tplsContainer.removeChild(tplsContainer.firstChild);
    }
    self.stateSelected = router.findRouteByState(state);

    len = self.stateSelected.controllers.length;
    while (len--) {
      self.loadControllers(state, self.stateSelected.controllers[len]);
    }

    len = self.stateSelected.templates.length;
    while (len--) {
      allPromisses.push(self.loadTemplates(state, self.stateSelected.templates[len]));
    }

    Q.all(allPromisses).then(function (results) {
      self.checkAllReady().then(function () {
        var timeout = setTimeout(function () {
          deferred.resolve();
          clearTimeout(timeout);
        }, 50);
      });
    }, function (error) {
      log.error('error get controller data: ' + state);
      deferred.reject();
    });

    return deferred.promise;
  };

  module.getNameController = function (controller) {
    var ctrlName = controller.split('-');
    var name = ctrlName.shift();
    var i = 0;
    var len = ctrlName.length;

    for (; i < len; i++) {
      name += ctrlName[i].charAt(0).toUpperCase() + ctrlName[i].slice(1);
    }
    return name;
  };

  module.loadControllers = function (state, controller) {
    var nodeScript = document.createElement('script');
    var controllerName = self.getNameController(controller);

    nodeScript.type = 'text\/javascript';
    nodeScript.src = './shell/theme/views/' + state + '/' + controller + '.js';
    nodeScript.id = 'js-' + controller;
    nodeScript.onload = self.addCtrlLoaded(controller);
    document.getElementById('argos-scripts-container').appendChild(nodeScript);
    nodeScript.setAttribute('data-ctrl', controllerName);
  };

  module.loadTemplates = function (state, template) {
    var req = new XMLHttpRequest();
    var templatePath = './shell/theme/views/' + state + '/' + template + '.html';

    req.open('GET', templatePath, true);

    req.onreadystatechange = function () {
      var templateScript = void 0;
      if (req.readyState === 4 && req.status === 200) {
        templateScript = document.createElement('div');
        templateScript.innerHTML = req.responseText;
        document.getElementById('argos-templates-container').appendChild(templateScript);
      }
    };

    req.send();
  };

  module.addCtrlLoaded = function (controller) {
    self.ctrlsLoaded.push(controller);
  };

  module.checkAllReady = function () {
    var deferred = Q.defer();
    var check = true;
    var entryCtrl = self.stateSelected.entry.split('.').shift().toString();

    if (self.ctrlsLoaded.length === !self.stateSelected.controllers.length) {
      check = false;
    }

    if (check) {
      deferred.resolve();
    } else {
      self.timer();
    }

    return deferred.promise;
  };

  module.timer = function () {
    var timeout = setTimeout(function () {
      self.checkAllReady();
      clearTimeout(timeout);
    }, 10);
  };

  return {
    loadView: module.loadView
  };
}();
//# sourceMappingURL=argos.min.js.map
